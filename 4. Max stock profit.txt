Find maximum profit earned from at most two stock transactions
Given a list containing future predictions of share prices, find the maximum profit earned by buying and selling shares at most twice with a constraint that a new transaction can only start after the previous transaction complete, i.e., we can only hold at most one share at a time.








import java.util.Scanner;

public class Main {

    public static int findMaxProfit(int[] price) {
        int n = price.length;
        if (n == 0) {
            return 0;
        }

        int[] profit = new int[n];
        profit[n - 1] = 0;
        int max_so_far = price[n - 1];

        for (int i = n - 2; i >= 0; i--) {
            profit[i] = Math.max(profit[i + 1], max_so_far - price[i]);
            max_so_far = Math.max(max_so_far, price[i]);
        }

        int min_so_far = price[0];

        for (int i = 1; i < n; i++) {
            profit[i] = Math.max(profit[i - 1], (price[i] - min_so_far) + profit[i]);
            min_so_far = Math.min(min_so_far, price[i]);
        }

        return profit[n - 1];
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] price = new int[n];
        for (int i = 0; i < n; i++) {
            price[i] = scanner.nextInt();
        }
        System.out.println(findMaxProfit(price));
    }
}


Output:The maximum profit is 7






-----------------------------
input-1
7
2
4
7
5
4
3
5
output-1
7
-----------------------------
input-2
7
100
180
260
310
40
535
695
output-2
865
-----------------------------
input-3
5
4
2
2
2
4
output-3
2
-----------------------------
input-4
5
5
4
3
2
1
output-4
0
-----------------------------
input-5
4
5
6
7
8
output-5
3




